# -*- coding: utf-8 -*-
"""Copia de Proyecto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mt8WtdHUtLRXCDx8t-FCCmdIVv5McSxy
"""

from google.colab import drive
drive.mount('/content/drive')

# Copiar el archivo a tu entorno de trabajo
!cp /content/drive/MyDrive/Steam_2024_bestRevenue_1500.csv /content/

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Leer el archivo CSV
df = pd.read_csv('/content/Steam_2024_bestRevenue_1500.csv')

# Mostrar las primeras filas del DataFrame
df.head()

# Ver el número de observaciones (filas) y columnas
df.shape

# Obtener estadísticas descriptivas para las columnas numéricas
df.describe()

# Ver los tipos de datos de cada columna
df.info()

# Contar los valores únicos en columnas categóricas
print(df['publisherClass'].value_counts())
print(df['publishers'].value_counts())

# Seleccionar solo las columnas numéricas
numerical_df = df.select_dtypes(include=['float64', 'int64'])

# Calcular la matriz de correlación
correlation_matrix = numerical_df.corr()

# Mostrar la matriz de correlación
correlation_matrix

# Mostrar la matriz de correlación
print(correlation_matrix)

import seaborn as sns
import matplotlib.pyplot as plt

import seaborn as sns
import matplotlib.pyplot as plt

# Calcular la matriz de correlación de las columnas numéricas
correlation_matrix = df.select_dtypes(include=['float64', 'int64']).corr()

# Crear un heatmap de la matriz de correlación
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Heatmap de la Matriz de Correlación')
plt.show()

# Crear un gráfico de dispersión para observar la relación entre 'price' y 'revenue'
plt.figure(figsize=(8, 6))
sns.scatterplot(x='price', y='revenue', data=df)
plt.title('Relación entre Precio y Revenue')
plt.xlabel('Precio')
plt.ylabel('Revenue')
plt.show()

# Eliminar columnas categóricas no deseadas excepto 'publisherClass'
df = df.drop(['name', 'releaseDate', 'publishers', 'developers', 'steamId'], axis=1)

# Aplicar transformación logarítmica a características con alta variabilidad
df['log_copiesSold'] = np.log1p(df['copiesSold'])

# Realizar One-Hot Encoding a la columna 'publisherClass'
df_encoded = pd.get_dummies(df, columns=['publisherClass'], drop_first=True)

# Definir las características (X) y la variable objetivo continua (y)
X = df_encoded.drop('revenue', axis=1)  # Todas las columnas menos 'revenue'
y = df_encoded['revenue']

# Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Escalar las características numéricas
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Definir el modelo de Random Forest Regressor
rf_regressor = RandomForestRegressor(random_state=42)

# Definir un espacio de hiperparámetros para la búsqueda en cuadrícula
param_grid_rf_regressor = {
    'n_estimators': [100, 200, 300],
    'max_depth': [10, 15, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 3]
}

# Configurar la búsqueda en cuadrícula
grid_search_rf_regressor = GridSearchCV(estimator=rf_regressor, param_grid=param_grid_rf_regressor, cv=5, scoring='r2', n_jobs=-1)
grid_search_rf_regressor.fit(X_train_scaled, y_train)

# Obtener el mejor modelo de la búsqueda
best_rf_regressor = grid_search_rf_regressor.best_estimator_

# Realizar predicciones y evaluar el modelo
y_pred = best_rf_regressor.predict(X_test_scaled)

# Imprimir los resultados de la evaluación
print("\nMejores parámetros encontrados para RandomForestRegressor:", grid_search_rf_regressor.best_params_)
print("\nEvaluación del modelo de Random Forest Regressor:")
print("R^2:", r2_score(y_test, y_pred))

# Importar las bibliotecas necesarias
import seaborn as sns

# Listar las variables de entrada que queremos graficar
variables = ['copiesSold', 'price', 'avgPlaytime', 'reviewScore']

# Crear gráficos de dispersión y de regresión para visualizar 'revenue' contra las variables
plt.figure(figsize=(20, 10))

for i, var in enumerate(variables, 1):
    plt.subplot(2, 2, i)
    sns.regplot(x=var, y='revenue', data=df, scatter_kws={'alpha':0.5}, line_kws={'color': 'red'})
    plt.title(f'Revenue vs {var}')
    plt.xlabel(var)
    plt.ylabel('Revenue')

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Aplicar transformación logarítmica a 'revenue' y otras variables con alta variabilidad
variables = ['copiesSold', 'price', 'avgPlaytime', 'reviewScore']
for var in variables + ['revenue']:
    df['log_' + var] = np.log1p(df[var])

# Crear gráficos de barras para comparar log(revenue) con las variables numéricas transformadas
plt.figure(figsize=(20, 10))
for i, var in enumerate(variables, 1):
    plt.subplot(2, 2, i)
    # Agrupar por rangos de la variable logarítmica y calcular la media de log(revenue)
    df['log_' + var + '_bins'] = pd.cut(df['log_' + var], bins=5)
    revenue_means = df.groupby('log_' + var + '_bins')['log_revenue'].mean()

    # Graficar
    revenue_means.plot(kind='bar', color='lightgreen', alpha=0.7)
    plt.title(f'Media de Log(Revenue) por Log({var}) (agrupado en rangos)')
    plt.xlabel(f'Log({var}) (rango)')
    plt.ylabel('Log(Revenue) Promedio')
    plt.xticks(rotation=45, ha='right')

plt.tight_layout()
plt.show()

# Importar las bibliotecas necesarias
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Definir el modelo de Random Forest
rf_model = RandomForestRegressor(random_state=42)

# Definir un espacio de hiperparámetros más detallado para la búsqueda
param_grid_rf_fine = {
    'n_estimators': [200, 300, 400, 500],
    'max_depth': [10, 15, 20, 25],
    'min_samples_split': [2, 3, 5],
    'min_samples_leaf': [2, 3, 4]
}

# Configurar la búsqueda en cuadrícula
grid_search_rf_fine = GridSearchCV(estimator=rf_model, param_grid=param_grid_rf_fine, cv=5, scoring='r2', n_jobs=-1)
grid_search_rf_fine.fit(X_train_scaled, y_train)

# Obtener el mejor modelo de la búsqueda
best_rf_model_fine = grid_search_rf_fine.best_estimator_

# Realizar predicciones y evaluar el modelo
y_pred_rf_fine = best_rf_model_fine.predict(X_test_scaled)

# Imprimir los resultados de la evaluación
print("\nMejores parámetros encontrados después de afinar el modelo:", grid_search_rf_fine.best_params_)
print("\nEvaluación del modelo de Random Forest afinado:")
print("MAE:", mean_absolute_error(y_test, y_pred_rf_fine))
print("RMSE:", mean_squared_error(y_test, y_pred_rf_fine, squared=False))
print("R^2:", r2_score(y_test, y_pred_rf_fine))

# Importar las bibliotecas necesarias
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Definir el modelo de Random Forest
rf_model = RandomForestRegressor(random_state=42)

# Definir el espacio de hiperparámetros a probar
param_grid_rf = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# Configurar la búsqueda en cuadrícula
grid_search_rf = GridSearchCV(estimator=rf_model, param_grid=param_grid_rf, cv=5, scoring='r2')
grid_search_rf.fit(X_train_scaled, y_train)

# Obtener el mejor modelo de la búsqueda
best_rf_model = grid_search_rf.best_estimator_

# Realizar predicciones y evaluar el modelo
y_pred_rf = best_rf_model.predict(X_test_scaled)

# Imprimir los resultados de la evaluación
print("\nMejores parámetros encontrados para RandomForestRegressor:", grid_search_rf.best_params_)
print("\nEvaluación del mejor modelo de Random Forest:")
print("MAE:", mean_absolute_error(y_test, y_pred_rf))
print("RMSE:", mean_squared_error(y_test, y_pred_rf, squared=False))
print("R^2:", r2_score(y_test, y_pred_rf))

# Importar las bibliotecas necesarias
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import warnings

# Ignorar advertencias de deprecación
warnings.filterwarnings('ignore')

# Definir X y y
X = df[['copiesSold', 'price', 'avgPlaytime', 'reviewScore']]
y = df['revenue']

# Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Escalar las características numéricas
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Convertir los datos escalados a DataFrames para mayor claridad (opcional)
X_train_scaled_df = pd.DataFrame(X_train_scaled, columns=X.columns)
X_test_scaled_df = pd.DataFrame(X_test_scaled, columns=X.columns)

# Configurar los hiperparámetros para la búsqueda en cuadrícula
param_grid = {
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# Crear el modelo de árbol de decisión
tree = DecisionTreeRegressor(random_state=42)

# Configurar la búsqueda en cuadrícula
grid_search = GridSearchCV(estimator=tree, param_grid=param_grid, cv=5, scoring='r2')
grid_search.fit(X_train_scaled, y_train)

# Obtener el mejor modelo de la búsqueda
best_tree = grid_search.best_estimator_

# Realizar predicciones y evaluar el modelo
y_pred_best = best_tree.predict(X_test_scaled)

# Imprimir los resultados de la evaluación
print("\nMejores parámetros encontrados:", grid_search.best_params_)
print("\nEvaluación del mejor modelo de árbol de decisión:")
print("MAE:", mean_absolute_error(y_test, y_pred_best))
print("RMSE:", mean_squared_error(y_test, y_pred_best, squared=False))
print("R^2:", r2_score(y_test, y_pred_best))

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Definir X y y
X = df[['copiesSold', 'price', 'avgPlaytime', 'reviewScore']]
y = df['revenue']

# Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Escalar las características numéricas
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Convertir los datos escalados a DataFrames para mayor claridad (opcional)
X_train_scaled_df = pd.DataFrame(X_train_scaled, columns=X.columns)
X_test_scaled_df = pd.DataFrame(X_test_scaled, columns=X.columns)

# Entrenar un modelo de árbol de decisión
tree_model = DecisionTreeRegressor(random_state=42)
tree_model.fit(X_train_scaled, y_train)

# Predicciones y evaluación
y_pred_tree = tree_model.predict(X_test_scaled)
print("\nEvaluación del modelo de árbol de decisión:")
print("MAE:", mean_absolute_error(y_test, y_pred_tree))
print("RMSE:", mean_squared_error(y_test, y_pred_tree, squared=False))
print("R^2:", r2_score(y_test, y_pred_tree))

